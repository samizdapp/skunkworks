version: '2'
volumes:
  postgres:
  uploads:
  static:
  config:
  matrix:
  element:
  dnsconfig:
  sqldata:
  netclient:
  wireguard:
  wirehub:
  pihole1_config:
  dnsmasq1_config:
  pihole2_config:
  dnsmasq2_config:
  nextcloud:
  redis:
  wg:
  assets:
  peertube_config:
  peertube_data:
  certs:
  extra_certs:
  wesher:
  etc:
  caddydata:
  hubweb:
  yggdrasil_config:
services:
  wireguard:
    build: ./services/wireguard
    privileged: true
    network_mode: host
    restart: "on-failure"
    labels:
      io.balena.features.kernel-modules: 1
    volumes:
      - wireguard:/wireguard

  pihole1:
    container_name: pihole1
    build: ./services/pihole
    privileged: true
    depends_on:
      - wireguard
    volumes:
      - "pihole1_config:/etc/pihole"
      - "dnsmasq1_config:/etc/dnsmasq.d"
    dns:
      - "127.0.0.1"
      - "1.1.1.1"
    network_mode: host
    environment:
      - INTERFACE=wgone
      - PIHOLE_INTERFACE=wgone
      - PIHOLE_ADDRESS=10.128.0.1
      - LIGHTTPD_PORT=10001
    labels:
      io.balena.features.dbus: "1"

  pihole2:
    container_name: pihole2
    build: ./services/pihole
    privileged: true
    network_mode: host
    volumes:
      - "pihole2_config:/etc/pihole"
      - "dnsmasq2_config:/etc/dnsmasq.d"
    dns:
      - "127.0.0.1"
      - "1.1.1.1"
    depends_on:
      - wireguard
    environment:
      - INTERFACE=wgtwo
      - PIHOLE_INTERFACE=wgtwo
      - PIHOLE_ADDRESS=10.128.0.2
      - LIGHTTPD_PORT=10002
    labels:
      io.balena.features.dbus: "1"

  caddy:
    build: ./services/caddy
    restart: always
    network_mode: host
    volumes:
      - element:/element
      - wireguard:/wireguard
      - certs:/usr/local/share/ca-certificates
      - certs:/wireguard/certs
      - extra_certs:/usr/local/share/ca-certificates/extra
      - caddydata:/data
      - wesher:/wesher
      - hubweb:/var/www/hubzilla
  wesher:
    build: ./services/wesher
    network_mode: host
    privileged: true
    volumes:
      - wesher:/var/lib/wesher
      - certs:/usr/local/share/ca-certificates
  # hubzilla:
  #   image: sebt3/hubzilla
  #   networks:
  #     - public
  #     - hubzilla
  #   volumes:
  #     - hubweb:/var/www/html
  #   environment:
  #     - DB_TYPE=postgres
  #     - DB_HOST=postgres
  #     - DB_USER=samizdapp
  #     - DB_PASSWORD=samizdapp
  # postgres:
  #   image: amd64/postgres:12.9-alpine
  #   container_name: postgres
  #   restart: always
  #   networks:
  #     - hubzilla
  #   environment:
  #     POSTGRES_USER: samizdapp
  #     POSTGRES_PASSWORD: samizdapp
  #     POSTGRES_DB: hub
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  # pleroma:
  #   build: ./services/docker-pleroma/
  #   image: pleroma
  #   container_name: pleroma_web
  #   restart: always
  #   ports:
  #     - '4000:4000'
  #   volumes:
  #     - uploads:/var/lib/pleroma/uploads
  #     - static:/var/lib/pleroma/static
  #   environment:
  #     DOMAIN: pleroma.wg
  #     INSTANCE_NAME: Pleroma
  #     ADMIN_EMAIL: admin@example.com
  #     NOTIFY_EMAIL: notify@example.com
  #     DB_USER: pleroma
  #     DB_PASS: ChangeMe!
  #     DB_NAME: pleroma
  #     DB_HOST: pleroma_db
  #   depends_on:
  #     - pleroma_db
  # matrix-generate:
  #   image: matrixdotorg/synapse:v1.49.2
  #   restart: "on-failure"
  #   command: generate
  #   environment:
  #     - SYNAPSE_SERVER_NAME=matrix.local.wg
  #     - SYNAPSE_REPORT_STATS=no
  #   volumes:
  #     - matrix:/data

  # matrix-setup:
  #   build: ./services/matrix
  #   volumes:
  #     - matrix:/data

  # matrix:
  #   image: matrixdotorg/synapse:v1.49.2
  #   restart: always
  #   network_mode: host
  #   volumes:
  #     - matrix:/data
  #     - etc:/etc
  #   depends_on:
  #     - matrix-setup

  # element:
  #   build: ./services/element
  #   restart: "on-failure"
  #   volumes:
  #     - element:/app
  # # You can comment this webserver section if you want to use another webserver/proxy
  # webserver:
  #   image: chocobozzz/peertube-webserver:latest
  #   # If you don't want to use the official image and build one from sources:
  #   # build:
  #   #   context: .
  #   #   dockerfile: Dockerfile.nginx
  #   env_file:
  #     - .env
  #   ports:
  #    - "80:80"
  #    - "443:443"
  #   volumes:
  #     - type: bind
  #       # Switch sources if you downloaded the whole repository
  #       #source: ../../nginx/peertube
  #       source: ./docker-volume/nginx/peertube
  #       target: /etc/nginx/conf.d/peertube.template
  #     - assets:/var/www/peertube/peertube-latest/client/dist:ro
  #     - ./docker-volume/data:/var/www/peertube/storage
  #     - certbot-www:/var/www/certbot
  #     - ./docker-volume/certbot/conf:/etc/letsencrypt
  #   depends_on:
  #     - peertube
  #   restart: "always"

  # # You can comment this certbot section if you want to use another webserver/proxy
  # certbot:
  #   container_name: certbot
  #   image: certbot/certbot
  #   volumes:
  #     - ./docker-volume/certbot/conf:/etc/letsencrypt
  #     - certbot-www:/var/www/certbot
  #   restart: unless-stopped
  #   entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done;"
  #   depends_on:
  #     - webserver

  # peertube:
  #   # If you don't want to use the official image and build one from sources:
  #   # build:
  #   #   context: .
  #   #   dockerfile: ./support/docker/production/Dockerfile.bullseye
  #   build: ./services/peertube
  #   environment:
  #     - PEERTUBE_DB_USERNAME=peertube
  #     - PEERTUBE_DB_PASSWORD=peertube
  #     - PEERTUBE_DB_SSL=false
  #     - PEERTUBE_DB_HOSTNAME=postgres
  #     - PEERTUBE_WEBSERVER_HOSTNAME=peertube.wg
  #     - PEERTUBE_TRUST_PROXY=["127.0.0.1", "loopback", "172.18.0.0/16"]
  #     - PEERTUBE_ADMIN_EMAIL=test@example.com
  #     - PT_INITIAL_ROOT_PASSWORD=testpassword
  #   ports:
  #     - "1935:1935" # If you don't want to use the live feature, you can comment this line
  #     - "9000:9000" # If you provide your own webserver and reverse-proxy, otherwise not suitable for production
  #   volumes:
  #     - assets:/app/client/dist
  #     - peertube_data:/data
  #     - peertube_config:/config
  #     - certs:/usr/local/share/ca-certificates
  #     - extra_certs:/usr/local/share/ca-certificates/extra
  #     - etc:/etc
  #   depends_on:
  #     - postgres
  #     - redis
  #     # - postfix
  #   restart: "always"
  # postgres:
  #   image: postgres:13-alpine
  #   environment:
  #     - POSTGRES_USER=peertube
  #     - POSTGRES_PASSWORD=peertube
  #     - POSTGRES_DB=peertube
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  #   restart: "always"
  # redis:
  #   image: redis:6-alpine
  #   volumes:
  #     - redis:/data
  #   restart: "always"
  # # # networks:
  # # #   default:
  # # #     ipam:
  # # #       driver: default
  # # #       config:
  # # #       - subnet: 172.18.0.0/16
  # #   # postfix:
  # #   #   image: mwader/postfix-relay
  # #   #   env_file:
  # #   #     - ./services/peertube/.env
  # #   #   volumes:
  # #   #     - ./docker-volume/opendkim/keys:/etc/opendkim/keys
  # #   #   restart: "always"
  yggdrasil:
    # https://stackoverflow.com/a/37090165
    build:
      context: services/yggdrasil
      dockerfile: contrib/docker/Dockerfile
      args:
        PKGVER: 0.1
    privileged: true
    network_mode: host
    volumes:
      - yggdrasil_config:/etc/yggdrasil-network
